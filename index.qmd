---
pagetitle: "{galah} 101 - Beginners guide"
title-slide-attributes: 
  data-background-color: "#fce8f1"
format: 
  revealjs: 
    code-overflow: scroll
    code-block-border-left: true
    theme: [default, custom.scss] 
    transition: none
    auto-stretch: true
    height: 900
    width: 1600
knitr:
  opts_chunk: 
    class-output: hscroll
revealjs-plugins:
  - attribution
---

```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
library(galah)
galah_config(email = "dax.kellie@csiro.au", verbose = FALSE)
```

```{python}
#| echo: false
#| eval: true
#| message: false
#| warning: false
import galah
galah.galah_config(email="amanda.buyan@csiro.au")
```

##  {#title data-menu-title="{galah} 101 - Beginner's guide" background-color="#F8C9DE"}
<center>
![](images/logos/galah_logo.png){height="350px"}
</center>
<span style='font-size: 5.3rem;'> {galah} 101 - Beginner's guide </span><br><br>
<b>Dr Dax Kellie</b>, <b>Dr Amanda Buyan</b><br> {{< fa brands twitter size=sm >}} <span style='font-size: 2rem;'>@daxkellie</span> <br>
<center>
![](images/logos/ALA_Logo.png){style='width: auto; height: 100px; margin-top: 50px; padding-left: 20px; padding-right: 20px'} ![](images/logos/NCRIS_logo.png){style='width: auto; height: 100px; margin-top: 50px; padding-left: 20px; padding-right: 20px'} ![](images/logos/CSIRO_logo.png){style='width: auto; height: 100px; margin-top: 50px; padding-left: 20px; padding-right: 20px'} 
</center>


# {data-menu-title="ALA"}

![](images/ALA-homepage.png){fig-align="center"}

#  {background-color="#B8573E" auto-animate="true"}

::: {style="color: #ffffff; font-size: 170%"}
<b>ALA4R</b><br>
:::

## ALA4R still had problems {.ala4r}

::: columns
::: {.column width="50%"}
<br>

-   **No function naming convention**
-   Confusing syntax
-   Inconsistent behaviour
:::

::: {.column width="\"50%"}
::: {style="color: #222322; font-size: 60%"}
<br><br>

-   abbreviations: `aus()`
-   snake case: `ala_fields()`
-   single words: `occurrences()`, `images()`
-   contractions: `fieldguide()`
:::
:::
:::

## ALA4R still had problems {.ala4r}

::: columns
::: {.column width="50%"}
<br>

-   No function naming convention
-   **Confusing syntax**
-   Inconsistent behaviour
:::

::: {.column width="\"50%"}
::: {style="color: #222322; font-size: 60%"}
<br><br>

-   unclear function names: `ala_list()`, `ala_lists()`, `specieslist()`
-   abbreviated argument names: `wkt`, `fq`, `qa`
-   Required `solr` queries: `"taxon_name:\"Alaba vibex\""`
:::
:::
:::

## ALA4R still had problems {.ala4r}

::: columns
::: {.column width="50%"}
<br>

-   No function naming convention
-   Confusing syntax
-   **Inconsistent behaviour**
:::

::: {.column width="\"50%"}
::: {style="color: #222322; font-size: 60%"}
<br><br>

-   Functions return either:
    -   a `data.frame`
    -   a `list`
    -   a PDF
:::
:::
:::

## tidyverse {background-image="images/logos/tidylogos.png" background-color="#000" background-size="30%" background-position="center"}

The tidyverse brought a set of recognised standards and syntax

#  {background-color="#f5b2d0"}

::: {style="color: #ffffff; font-size: 200%"}
<b>galah</b><br>
:::

## galah {.galah}

::: columns
::: {.column width="30%"}
<center>
![](images/logos/galah_logo.png)\
![](images/logos/Rlogo.svg){height="100px"}
</center>
:::

::: {.column width="70%" style="margin-left:50px;"}
-   Query the ALA (and other national GBIF nodes)
-   Use tidy syntax that was structured but flexible
:::
:::

## galah {.galah}

::: columns
::: {.column width="30%"}
<center>
![](images/logos/galah_logo.png)\
![](images/logos/Rlogo.svg){height="100px"}
</center>
:::

::: {.column width="70%" style="margin-left:50px;"}
::: {style="font-size: 50%;"}
| Lookup         | Narrow a query      | Run a query           |
|----------------|---------------------|-----------------------|
| `show_all()`   | `galah_identify()`  | `atlas_counts()`      |
| `search_all()` | `galah_filter()`    | `atlas_occurrences()` |
|                | `galah_select()`    | `atlas_species()`     |
|                | `galah_group_by()`  | `atlas_media()`       |
|                | `galah_geolocate()` |                       |
:::
:::
:::

## Build a query {.galah}

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
#| code-line-numbers: "|3|4,5,6,7|8"
library(galah)

galah_call() |>
  galah_identify("Eolophus roseicapilla") |> # galahs
  galah_filter(year >= 2019,
               stateProvince == "New South Wales") |>
  galah_group_by(year, dataResourceName) |>
  atlas_counts()
```

#  {background-color="#f5b2d0"}

::: {style="color: #ffffff; font-size: 200%"}
<b>galah for Python</b><br>
:::

## Why Python? {.galah .scrollable}

::: columns
::: {.column width="30%"}
<center>
![](images/logos/galah_logo.png)\
![](images/logos/python-logo.svg){height="100px"}
</center>
[*PYPL website: https://pypl.github.io/PYPL.html CC-BY 3.0*]{style="font-size:.9rem;"}
:::

::: {.column width="70%" style="margin-left:50px;"}
::: {style="font-size: 50%;"}
![](images/Popularity_Programming_Languages.png){height="369px"} \
![](images/PYPL_August_2023.png){height="380px"}
:::
:::
::::

## galah for Python {.galah}

::: columns
::: {.column width="30%"}
<center>
![](images/logos/galah_logo.png)\
![](images/logos/python-logo.svg){height="100px"}
</center>
:::

::: {.column width="70%" style="margin-left:50px;"}
::: {style="font-size: 50%;"}
| Lookup               | Narrow a query                                               | Run a query                 |
|----------------------|--------------------------------------------------------------|-----------------------------|
| `galah.show_all()`   | `taxa=`                                                      | `galah.atlas_counts()`      |
| `galah.search_all()` | `filters=`                                                   | `galah.atlas_occurrences()` |
|                      | `select=`                                                    | `galah.atlas_species()`     |
|                      | `group_by=`                                                  | `galah.atlas_media()`       |
|                      | `geolocate=`                                                 |                             |

*Note: {galah} for Python narrows queries with arguments inside `atlas_` functions*
:::
:::
:::

## Build a query {.galah}

<!-- Build the same query but in python  -->

```{python}
#| eval: true
#| echo: false
# see if I can put column width here for whole doc
import pandas as pd
pd.set_option('display.max_columns', None)
pd.set_option('expand_frame_repr', False)
```

```{python}
#| eval: true
#| echo: true
#| message: false
#| warning: false
#| class-output: hscroll
#| code-line-numbers: "|3|4,5,6,7|8"
import galah

galah.atlas_counts(
  taxa = "Eolophus roseicapilla",
  filters=["year>=2019","stateProvince==New South Wales"],
  group_by=["year", "dataResourceName"]
)
```

## Learn how to use galah for R and Python {.galah}

<br>

* Install & load {galah}
* See or search for information
* Build a query (counts, occurrences)
* Make a map of observations




# {data-menu-title="Install and load {galah}" background-color="#f5b2d0"}

::: {style="color: #ffffff; font-size: 200%"}
<b>Install and load {galah}</b><br>
:::


## Install and load {galah} {.galah}

:::: columns
:::{.column width="50%"}
<center>
![](images/logos/rstudio.svg){height=50px}
</center>

```{r}
#| echo: true
#| eval: false
install.packages("galah") # install
library(galah)            # load
```

::: {.fragment .fade-in fragment-index="1"}
<br>
We can already run a simple query!

```{r}
#| echo: true
atlas_counts()
```
:::

:::

:::{.column width="50%"}
<center>
![](images/logos/python-logo.svg){height=50px}
</center>
```{python}
#| echo: true
#| eval: false
pip install galah-python
import galah
```

::: {.fragment .fade-in fragment-index="1"}
<br>

```{python}
#| echo: true
#| results: hide
#| code-overflow: scroll
galah.galah_config(data_profile="None")
```


```{python}
#| echo: true
#| code-overflow: scroll
galah.atlas_counts()
```
:::
:::
::::


#  {data-menu-title="Build a query for Peron's tree frog" background-color="#f5b2d0"}

::: {style="color: #ffffff; font-size: 120%;"}
<b>Build a query</b><br>
Download record counts and occurrence records of Peron's tree frog since 2018 in New South Wales by FrogID
:::

##  {data-menu-title="Peron's tree frog" background-image="images/litoria-peronii1.jpg"}

:::{.attribution style="color: #fff"}
Photo | Indiaianson CC BY NC \
*Litoria peronii*
:::

##  {data-menu-title="Peron's tree frog" background-image="images/litoria-peronii2.jpeg"}

:::{.attribution style="color: #fff"}
Photo | Jeannie CC BY NC \
*Litoria peronii*
:::


#  {data-menu-title="See or search for information" background-color="#f5b2d0"}

::: {style="color: #ffffff; font-size: 200%"}
<b>See or search for information</b><br>
:::


## `show_all()` & `search_all()` {.galah}
<center>
![](images/info-table.png){height=800px}
</center>

Use these functions to find information or metadata to filter your queries


## Check scientific name for Peron's tree frog {.galah .scrollable}

:::: columns
:::{.column width="50%"}
<center>
![](images/logos/rstudio.svg){height=50px}
</center>

```{r}
#| echo: true
#| code-overflow: scroll
search_taxa("litoria peronii")
```

::: {.fragment .fade-in fragment-index="1"}
<br>
Incorrect search term

<!-- What happens with a bad search?  -->
```{r}
#| echo: true
#| code-overflow: scroll
search_taxa("incorrect taxa")
```

::: {.fragment .fade-in fragment-index="2"}
<br>
Search for multiple taxa

```{r}
#| echo: true
#| code-overflow: scroll
search_taxa("litoria peronii", "Crinia signifera", "Rhinella marina")
```
:::

:::

:::

:::{.column width="50%"}
<center>
![](images/logos/python-logo.svg){height=50px}
</center>

```{python}
#| echo: true
#| code-overflow: scroll
#| tbl-colwidths: false
galah.search_taxa("litoria peronii")
```

::: {.fragment .fade-in fragment-index="1"}
<br>
<br>
<br>
<br>

:::{style="margin-top:30px;"}
```{python}
#| echo: true
#| code-overflow: scroll
galah.search_taxa("incorrect taxa")
```
:::

::: {.fragment .fade-in fragment-index="2"}
<br><br>

```{python}
#| echo: true
#| code-overflow: scroll
galah.search_taxa(taxa=["litoria peronii", "Crinia signifera", "Rhinella marina"])
```
:::
:::
:::
::::


## Download record counts of <u>Peron's tree frog *(Litoria peronii)*</u> {.galah}

:::: columns
:::{.column width="50%"}
<center>
![](images/logos/rstudio.svg){height=50px}
</center>
```{r}
#| echo: true
#| code-overflow: scroll
galah_call() |>
  galah_identify("litoria peronii") |>
  atlas_counts()
```
:::

:::{.column width="50%"}
<center>
![](images/logos/python-logo.svg){height=50px}
</center>
```{python}
#| echo: true
#| code-overflow: scroll
galah.atlas_counts(
  taxa="litoria peronii"
)
```
:::
::::


## Download record counts of Peron's tree frog *(Litoria peronii)* <u>since 2018</u> {.galah}

To see a list of all possible fields, use `show_all()`

:::: columns
:::{.column width="50%"}
<center>
![](images/logos/rstudio.svg){height=50px}
</center>
```{r}
#| echo: true
#| code-overflow: scroll
show_all(fields)
```
:::

:::{.column width="50%"}
<center>
![](images/logos/python-logo.svg){height=50px}
</center>
```{python}
#| echo: true
#| code-overflow: scroll
galah.show_all(fields=True)
```
:::
::::

## Download record counts of Peron's tree frog *(Litoria peronii)* <u>since 2018</u> {.galah}

Search for valid field names with "year" in title or description

:::: columns
:::{.column width="50%"}
<center>
![](images/logos/rstudio.svg){height=50px}
</center>
```{r}
#| echo: true
#| code-overflow: scroll
search_all(fields, "year")
```
:::

:::{.column width="50%"}
<center>
![](images/logos/python-logo.svg){height=50px}
</center>
```{python}
#| echo: true
#| code-overflow: scroll
galah.search_all(fields="year",column_name="id")
```
:::
::::

## Download record counts of Peron's tree frog *(Litoria peronii)* <u>since 2018</u> {.galah}

Add year to your query as a filter

:::: columns
:::{.column width="50%"}
<center>
![](images/logos/rstudio.svg){height=50px}
</center>
```{r}
#| echo: true
#| code-overflow: scroll
galah_call() |>
  galah_identify("litoria peronii") |>
  galah_filter(year >= 2018) |>
  atlas_counts()
```
:::

:::{.column width="50%"}
<center>
![](images/logos/python-logo.svg){height=50px}
</center>
```{python}
#| echo: true
#| code-overflow: scroll
galah.atlas_counts(
  taxa="litoria peronii",
  filters="year>=2018"
)
```
:::
::::


## Download record counts of Peron's tree frog *(Litoria peronii)* since 2018 <u>in New South Wales</u> {.galah}

Search for valid fields that contain "australian states" in title or description

:::: columns
:::{.column width="50%"}
<center>
![](images/logos/rstudio.svg){height=50px}
</center>
```{r}
#| echo: true
#| code-overflow: scroll
search_all(fields, "australian states")
```
:::

:::{.column width="50%"}
<center>
![](images/logos/python-logo.svg){height=50px}
</center>
```{python}
#| echo: true
#| code-overflow: scroll
galah.search_all(fields="Australian States")
```
:::
::::

## Download record counts of Peron's tree frog *(Litoria peronii)* since 2018 <u>in New South Wales</u> {.galah}

See and search for values within field `cl22` to see whether it contains "New South Wales"

:::: columns
:::{.column width="50%"}
<center>
![](images/logos/rstudio.svg){height=50px}
</center>
```{r}
#| echo: true
#| code-overflow: scroll
search_all(fields, "cl22") |>
  show_values()
```

<br>

```{r}
#| echo: true
#| code-overflow: scroll
search_all(fields, "cl22") |>
  search_values("new south wales")
```
:::

:::{.column width="50%"}
<center>
![](images/logos/python-logo.svg){height=50px}
</center>
```{python}
#| echo: true
#| code-overflow: scroll

galah.show_values(field="cl22")
```

<br>

```{python}
#| echo: true
#| code-overflow: scroll
galah.search_values(field="cl22",value="new south wales")
```
:::
::::

## Download record counts of Peron's tree frog *(Litoria peronii)* since 2018 <u>in New South Wales</u> {.galah}

Add state/territory to your query as a filter

:::: columns
:::{.column width="50%"}
<center>
![](images/logos/rstudio.svg){height=50px}
</center>
```{r}
#| echo: true
#| code-overflow: scroll
galah_call() |>
  galah_identify("litoria peronii") |>
  galah_filter(year >= 2018,
               cl22 == "New South Wales") |>
  atlas_counts()
```
:::

:::{.column width="50%"}
<center>
![](images/logos/python-logo.svg){height=50px}
</center>
```{python}
#| echo: true
#| code-overflow: scroll

galah.atlas_counts(
  taxa="litoria peronii",
  filters=["year>=2018","cl22=New South Wales"]
)
```
:::
::::


## Download record counts of Peron's tree frog *(Litoria peronii)* since 2018 in New South Wales <u>by FrogID</u> {.galah .scrollable}

Search for fields that contain "dataresource". Then see and search for values within field 

:::: columns
:::{.column width="50%"}
<center>
![](images/logos/rstudio.svg){height=50px}
</center>
```{r}
#| echo: true
#| code-overflow: scroll
search_all(fields, "dataresource")
```

<br>

```{r}
#| echo: true
#| code-overflow: scroll
search_all(fields, "dataResourceName") |>
  show_values()
```

<br>

```{r}
#| echo: true
#| code-overflow: scroll
search_all(fields, "dataResourceName") |>
  search_values("frogid")
```
:::

:::{.column width="50%"}
<center>
![](images/logos/python-logo.svg){height=50px}
</center>
```{python}
#| echo: true
#| code-overflow: scroll
galah.search_all(fields="dataResource",column_name="id")

# galah.show_values(field="dataResourceName")

# galah.search_values(field="dataResourceName",value="frogid")
```
:::
::::


## Download record counts of Peron's tree frog *(Litoria peronii)* since 2018 in New South Wales <u>by FrogID</u> {.galah}

:::: columns
:::{.column width="50%"}
<center>
![](images/logos/rstudio.svg){height=50px}
</center>
```{r}
#| echo: true
#| code-overflow: scroll
galah_call() |>
  galah_identify("litoria peronii") |>
  galah_filter(year >= 2018,
               cl22 == "New South Wales",
               dataResourceName == "FrogID") |>
  atlas_counts()
```
:::

:::{.column width="50%"}
<center>
![](images/logos/python-logo.svg){height=50px}
</center>
```{python}
#| echo: true
#| code-overflow: scroll

galah.atlas_counts(
  taxa="litoria peronii",
  filters=["year>=2018",
           "cl22=New South Wales",
           "dataResourceName=FrogID"]
)
```
:::
::::



#  {data-menu-title="Group counts by fields" background-color="#f5b2d0"}

::: {style="color: #ffffff; font-size: 200%"}
<b>Group counts by fields</b><br>
:::



## Group counts by data resource {.galah}

:::: columns
:::{.column width="50%"}
<center>
![](images/logos/rstudio.svg){height=50px}
</center>
```{r}
#| echo: true
#| code-overflow: scroll
galah_call() |>
  galah_identify("litoria peronii") |>
  galah_filter(year >= 2018,
               cl22 == "New South Wales") |>
  galah_group_by(dataResourceName) |>
  atlas_counts()
```
:::

:::{.column width="50%"}
<center>
![](images/logos/python-logo.svg){height=50px}
</center>
```{python}
#| echo: true
#| code-overflow: scroll

galah.atlas_counts(
  taxa="litoria peronii",
  filters=["year>=2018",
           "cl22=New South Wales"],
  group_by="dataResourceName",
  expand=False
)
```
:::
::::

## Group counts by state/territory and year {.galah}

:::: columns
:::{.column width="50%"}
<center>
![](images/logos/rstudio.svg){height=50px}
</center>
```{r}
#| echo: true
#| code-overflow: scroll
galah_call() |>
  galah_identify("litoria peronii") |>
  galah_filter(year >= 2018,
               dataResourceName == "FrogID") |>
  galah_group_by(cl22, year) |>
  atlas_counts()
```
:::

:::{.column width="50%"}
<center>
![](images/logos/python-logo.svg){height=50px}
</center>
```{python}
#| echo: true
#| code-overflow: scroll
galah.atlas_counts(
  taxa="litoria peronii",
  filters=["year>=2018",
           "dataResourceName=FrogID"],
  group_by=["cl22","year"]
)
```
:::
::::


#  {data-menu-title="Download occurrences" background-color="#f5b2d0"}

::: {style="color: #ffffff; font-size: 200%"}
<b>Download occurrences</b><br>
:::


## Download record <u>counts</u> of Peron's tree frog *(Litoria peronii)* since 2018 in New South Wales by FrogID {.galah}

:::: columns
:::{.column width="50%"}
<center>
![](images/logos/rstudio.svg){height=50px}
</center>
```{r}
#| echo: true
#| code-overflow: scroll
galah_call() |>
  galah_identify("litoria peronii") |>
  galah_filter(year >= 2018,
               cl22 == "New South Wales",
               dataResourceName == "FrogID") |>
  atlas_counts()
```
:::

:::{.column width="50%"}
<center>
![](images/logos/python-logo.svg){height=50px}
</center>
```{python}
#| echo: true
#| code-overflow: scroll

galah.atlas_counts(
  taxa="litoria peronii",
  filters=["year>=2018",
           "cl22=New South Wales",
           "dataResourceName=FrogID"]
)
```
:::
::::



## Download record <u>occurrences</u> of Peron's tree frog *(Litoria peronii)* since 2018 in New South Wales by FrogID {.galah}


:::: columns
:::{.column width="50%"}
<center>
![](images/logos/rstudio.svg){height=50px}
</center>
```{r}
#| echo: true
#| eval: false
#| code-overflow: scroll
galah_config(email = "your-email-here") # registered ALA email
```

```{r}
#| echo: true
#| code-overflow: scroll
galah_call() |>
  galah_identify("litoria peronii") |>
  galah_filter(year >= 2018,
               cl22 == "New South Wales",
               dataResourceName == "FrogID") |>
  atlas_occurrences()
```
:::

:::{.column width="50%"}
<center>
![](images/logos/python-logo.svg){height=50px}
</center>
```{python}
#| echo: true
#| eval: false
#| code-overflow: scroll
galah.galah_config(email="your-email-here")
```

```{python}
#| echo: true
#| code-overflow: scroll
galah.atlas_occurrences(
  taxa="litoria peronii",
  filters=["year>=2018",
           "cl22=New South Wales",
           "dataResourceName=FrogID"]
)
```
:::
::::

<br><br>
[*Register your email by [creating an ALA account](https://auth.ala.org.au/userdetails/registration/createAccount)*]{style="font-size:.9rem;"}


## Download record <u>occurrences</u> of Peron's tree frog *(Litoria peronii)* since 2018 in New South Wales by FrogID {.galah}

Only select certain fields

:::: columns
:::{.column width="50%"}
<center>
![](images/logos/rstudio.svg){height=50px}
</center>
```{r}
#| echo: true
#| eval: false
#| code-overflow: scroll
galah_config(email = "your-email-here") # registered ALA email
```


```{r}
#| echo: true
#| code-overflow: scroll
galah_call() |>
  galah_identify("litoria peronii") |>
  galah_filter(year >= 2018,
               cl22 == "New South Wales",
               dataResourceName == "FrogID") |>
  galah_select(scientificName, decimalLongitude, decimalLatitude) |>
  atlas_occurrences()
```
:::

:::{.column width="50%"}
<center>
![](images/logos/python-logo.svg){height=50px}
</center>
```{python}
#| echo: true
#| eval: false
#| code-overflow: scroll
galah.galah_config(email="your-email-here")
```

```{python}
#| echo: true
#| code-overflow: scroll

galah.atlas_occurrences(
  taxa="litoria peronii",
  filters=["year>=2018",
           "cl22=New South Wales",
           "dataResourceName=FrogID"],
  fields=["scientificName","decimalLongitude","decimalLatitude"]
)
```
:::
::::

[*Note: You only need to run `galah_config()` once per session*]{style="font-size:.9rem;"}


#  {data-menu-title="Make a map" background-color="#f5b2d0" auto-animate="true"}

::: {style="color: #ffffff; font-size: 200%"}
<b>Make a map</b><br>
:::


## Make a map {.galah .scrollable}

::: {.panel-tabset}

### R {style="font-size=90%"}

<center>
![](images/logos/rstudio.svg){height=50px}
</center>

Load packages

```{r}
#| echo: true
#| code-overflow: scroll
library(dplyr)
library(ggplot2)
library(sf)      # for handling spatial objects
library(ozmaps)  # excellent australia maps
```

Download frog data

```{r}
#| echo: true
#| code-overflow: scroll
# Download data
frogs <- galah_call() |>
  galah_identify("litoria peronii") |>
  galah_filter(year >= 2018,
               cl22 == "New South Wales",
               dataResourceName == "FrogID") |>
  galah_select(scientificName, decimalLongitude, decimalLatitude) |>
  atlas_occurrences()
frogs
```

`ozmap_states()` contains AUS state/territory boundaries

```{r}
#| echo: true
#| code-overflow: scroll
# See what's in `ozmap_states`
ozmaps::ozmap_states
```

Filter to NSW boundary

```{r}
#| echo: true
#| code-overflow: scroll
# Get map of New South Wales
nsw <- ozmaps::ozmap_states |>
  filter(NAME == "New South Wales")
nsw
```

Make sure map is in correct spatial projection (ALA records are in WGS84)

```{r}
#| echo: true
#| code-overflow: scroll
nsw <- nsw |>
  sf::st_transform(crs = st_crs("WGS84")) 
nsw

# see map
ggplot() + geom_sf(data = nsw, fill = "white")
```

Make map

```{r}
#| echo: true
#| code-overflow: scroll
# Map frog observations
ggplot() +
  geom_sf(data = nsw,
          fill = "white",
          colour = "grey70") +
  geom_point(data = frogs,
             aes(x = decimalLongitude,
                 y = decimalLatitude),
             colour = "#6fab3f",
             alpha = 0.5) + 
  theme_void()
```

### Python

<center>
![](images/logos/python-logo.svg){height=50px}
</center>
Load libraries
```{python}
#| echo: true
import galah
from matplotlib import pyplot as plt
import geopandas as gpd
```
Get Peron's tree frog occurrences
```{python}
#| echo: true
#| code-overflow: scroll
frogs = galah.atlas_occurrences(
  taxa="litoria peronii",
  filters=["year>=2018",
           "cl22=New South Wales",
           "dataResourceName=FrogID"],
  fields=["scientificName","decimalLongitude","decimalLatitude"]
)
frogs
```
Get Australian state and territory boundaries ([link to shapefile](https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/digital-boundary-files/STE_2021_AUST_SHP_GDA94.zip)).  
Select New South Wales
```{python}
#| echo: true
#| code-overflow: scroll
states = gpd.read_file("STE_2021_AUST_GDA94.shp")
print(states.crs)
states
```
Plot New South Wales 
```{python}
#| echo: true
#| code-overflow: scroll
states = states.to_crs(4326)
states[states["STE_NAME21"] == "New South Wales"].plot(edgecolor = "#5A5A5A", linewidth = 0.5, facecolor = "white", figsize = (24,10))
```
Add occurrence records to the map
```{python}
#| echo: true
#| code-overflow: scroll
ax = states[states["STE_NAME21"] == "New South Wales"].plot(edgecolor = "#5A5A5A", linewidth = 0.5, facecolor = "white", figsize = (24,10))
plt.scatter(frogs['decimalLongitude'],frogs['decimalLatitude'], c = "#6fab3f", alpha = 0.5)
```
:::



#  {background-color="#f5b2d0" auto-animate="true"}

::: {style="color: #ffffff; font-size: 200%"}
<b>Help & other resources</b><br>
:::

## Help & other resources {background-color="#fce8f1"}
<br>

*For code references & help getting started*:

  * The {galah} website: [https://galah.ala.org.au/](https://galah.ala.org.au/)

<br>
*Quick code reference*:

  * [Cheat sheet for Python](https://galah.ala.org.au/Python/cheatsheet/index.html)
  * [Cheat sheet for R](https://github.com/AtlasOfLivingAustralia/galah-R/blob/main/cheatsheet/galah-r.pdf)
  
<br>
*To learn to how to use data for analyses and dataviz*:

  * ALA Labs: [https://labs.ala.org.au/](https://labs.ala.org.au/)



## Thank you {background-color="#fce8f1"}

::: columns
::: {.column width="60%"}
::: {style="font-size: 70%;"}
<b>Dax Kellie</b><br>Data Analyst (galah-R)<br>Science & Decision Support \| ALA <br>{{< fa envelope size=lg >}}: [dax.kellie\@csiro.au](mailto:dax.kellie@csiro.au)<br> {{< fa brands twitter size=lg >}}: [\@daxkellie](https://twitter.com/daxkellie)<br> {{< fa brands github size=lg >}}: [\@daxkellie](https://github.com/daxkellie) <br><br>
<b>Amanda Buyan</b><br>Data Analyst (galah-python)<br>Science & Decision Support \| ALA <br>{{< fa envelope size=lg >}}: [amanda.buyan\@csiro.au](mailto:amanda.buyan@csiro.au)<br> {{< fa brands github size=lg >}}: [\@acbuyan](https://github.com/acbuyan) <br> <br> <b>`galah` development team</b><br> Martin Westgate, Shandiya Balasubramaniam<br>Matilda Stevenson, Caitlin Ramsey<br>Peggy Newman<br> <em>These slides were made using Quarto</em>
:::
:::

::: {.column width="40%"}
<center>

![](images/logos/ALA_Logo.png){style="width: auto; height: 90px"}<br> ![](images/logos/NCRIS_logo.png){style="width: auto; height: 90px"} ![](images/logos/CSIRO_logo.png){style="width: auto; height: 90px"}

</center>
:::
:::


